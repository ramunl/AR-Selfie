apply plugin: 'com.google.ar.sceneform.plugin'// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.supportVersion = '27.1.0'
    ext.moxyVersion = '1.7.0'
    ext.ffmpeg = '4.0.1'
    ext.javacv = '1.4.2'
    ext.grpc_version = '1.19.0'
    ext.arcore_version = '+'
    ext.kotlin_version = '1.3.50'
    ext.daggerVersion = '2.20'
    ext.timberVersion = '4.7.1'
    ext.rxJavaVersion = '2.2.8'
    ext.rxAndroidVersion = '2.1.1'
    ext.rxKotlinVersion = '2.3.0'
    ext.loggingInterceptorVersion = '3.8.0'
    ext.retrofitVersion = '2.5.0'

    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.10"
        classpath "com.google.ar.sceneform:plugin:$arcore_version"
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.google.gms:google-services:4.3.2'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()

    }
}
ext {
    versions = [
            'javacv': '1.4.2',
            'ffmpeg': '4.0.1'
    ]
}
subprojects {
    if (it.name == 'app' || it.name == 'cloudAnchorTest') {
        apply plugin: 'com.android.application'
        apply plugin: 'io.fabric'
        if(it.name == 'cloudAnchorTest') {
            apply plugin: 'com.google.gms.google-services'
        }
    } else {
        apply plugin: 'com.android.library'
    }

    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'
    apply plugin: 'kotlin-kapt'
    apply plugin: 'com.google.ar.sceneform.plugin'

    android {
        compileSdkVersion 29
        defaultConfig {
            multiDexEnabled true
            minSdkVersion 24
            targetSdkVersion 29
            versionCode 1
            versionName "1.0"
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        kapt {
            correctErrorTypes = true
        }
    }

    dependencies {
        implementation fileTree(include: ['*.jar'], dir: 'libs')
        //kotlin support
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
        //dagger
        implementation "com.google.dagger:dagger:$daggerVersion"
        implementation "com.google.dagger:dagger-android:$daggerVersion"
        implementation "com.google.dagger:dagger-android-support:$daggerVersion"
        kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
        kapt "com.google.dagger:dagger-compiler:$daggerVersion"
        //Rx
        implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
        implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
        implementation "io.reactivex.rxjava2:rxkotlin:$rxKotlinVersion"
        implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        //logger
        implementation "com.jakewharton.timber:timber:$timberVersion"
        implementation "com.squareup.okhttp3:okhttp:$loggingInterceptorVersion"
        implementation "com.squareup.okhttp3:logging-interceptor:$loggingInterceptorVersion"

        implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

        // ARCore library
        api "com.google.ar.sceneform:core:$arcore_version"
        // Provides ArFragment, and other Sceneform UX resources:
        //  implementation "com.cyber.ux:sceneform-ux:$arcore_version"
        implementation "com.google.ar:core:$arcore_version"
        implementation "com.google.ar.sceneform:plugin:$arcore_version"
        implementation 'javax.annotation:javax.annotation-api:1.3.2'
        implementation('com.crashlytics.sdk.android:crashlytics:2.9.9@aar') {
            transitive = true
        }

        implementation "io.grpc:grpc-stub:$grpc_version" // TODO move it data

        implementation 'com.github.bumptech.glide:glide:4.9.0'
        annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'
        implementation 'com.squareup.picasso:picasso:2.71828'

        implementation 'org.apache.commons:commons-math3:3.6.1'

        implementation 'com.makeramen:roundedimageview:2.3.0'
        //location dependencies
        implementation 'com.google.android.gms:play-services-location:17.0.0'


        //recorder
        implementation(group: 'org.bytedeco', name: 'javacv-platform', version: versions.javacv) {
            exclude group: 'org.bytedeco.javacpp-presets'
        }
        implementation group: 'org.bytedeco.javacpp-presets', name: 'ffmpeg', version: "${versions.ffmpeg}-${versions.javacv}"
        implementation group: 'org.bytedeco.javacpp-presets', name: 'ffmpeg', version: "${versions.ffmpeg}-${versions.javacv}", classifier: 'android-arm'
        implementation group: 'org.bytedeco.javacpp-presets', name: 'ffmpeg', version: "${versions.ffmpeg}-${versions.javacv}", classifier: 'android-arm64'

    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


sceneform.asset('domain/src/main/assets/andy.obj',
        'default',
        'domain/src/main/assets/andy.sfa',
        'src/main/assets/andy')